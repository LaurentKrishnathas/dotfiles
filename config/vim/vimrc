"let mapleader = "\\"
let mapleader = "\<Space>"
let maplocalleader ="<D-"



" leaving insert mode
imap <leader>q <Esc>
imap <leader>' ''<Esc>i
imap <leader>" ""<Esc>i
imap <leader>( ()<Esc>i
imap <leader>[ []<Esc>i
imap <leader>{ {}<E>i

"exiting insert mode
"inoremap jk <esc>   "not working as it jumps to next line

nnoremap <leader>ag :!ag<SPACE>

" save, quit
nnoremap <leader>s :w<cr>
nnoremap <leader>q :q!<cr>

" sourcing and editing vimrc
nnoremap <leader>rv :source<Space>~/.vimrc<cr>
nnoremap <leader>vim :tabedit ~/.vimrc<CR>
nnoremap <leader>aws :tabedit ~/.aws/credentials<CR>
nnoremap <leader>awsc :tabedit ~/.aws/config<CR>
nnoremap <leader>ssh :tabedit ~/.ssh/config<CR>
nnoremap <leader>tmux :tabedit ~/.tmux.conf<CR>
nnoremap <leader>known :tabedit ~/.ssh/known_hosts<CR>
nnoremap <leader>run V:'<,'>w !sh
nnoremap <leader>runline V:'<,'>w !sh<CR>
nnoremap <leader>runi V:'<,'> !sh
nnoremap <leader>runall :'<,'> !sh
nnoremap <leader>cd :cd ~/code/src/codecommit/

" moving visual block
vnoremap J :m'>+1<CR>gv=gv
vnoremap K :m'<-2<CR>gv=gv''


" Plugin mapping
map <leader>n :NERDTreeToggle<CR>
map <leader><leader> <Plug>(easymotion-prefix)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" Autocommands
augroup testgroup
  autocmd FileType javascript nnoremap <buffer> <localleader>/ I//<esc>
  autocmd FileType python     nnoremap <buffer> <localleader>/ I#<esc>
  autocmd FileType vim     nnoremap <buffer> <localleader>/ I"<esc>
augroup END

" split windows
noremap <Leader>h :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>

"" Switching windows
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h

"" Git
" noremap <Leader>ga :Gwrite<CR>
" noremap <Leader>gc :Gcommit<CR>
" noremap <Leader>gsh :Gpush<CR>
" noremap <Leader>gll :Gpull<CR>
noremap <Leader>gs :Gstatus<CR>
" noremap <Leader>gb :Gblame<CR>
" noremap <Leader>gd :Gvdiff<CR>
" noremap <Leader>gr :Gremove<CR>


if executable('ag')
let $FZF_DEFAULT_COMMAND ='ag --hidden --ignore .git -g""'
  set grepprg=ag\ --nogroup\ --nocolor
endif"'


"" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

"" Directories for swp files
"set nobackup
"set noswapfile"
set backupdir=/tmp//
set directory=/tmp//
set undodir=/tmp//
set backup
autocmd BufWritePre * let &backupext = substitute(expand('%:p:h'),'/','%','g')





" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap * *zzzv
nnoremap # #zzzv
nnoremap g* g*zzzv
nnoremap g# g#zzzv

" remove  hightlight after searching
noremap <silent> <leader><cr> :noh<cr>

" Toggle Relative Number
nnoremap <silent> <leader>nb :set relativenumber!<CR>

function! GoogleSearch()
     let searchterm = getreg("g")
     exec "silent! !chrome \"http://google.com/search?q=" . searchterm . "\" &"
endfunction
vnoremap <F6> "gy<Esc>:call GoogleSearch()<CR>


" Shift to the next round tab stop.
set shiftround
" " Set auto indent spacing.
set shiftwidth=2


" Switch between tabs
nnoremap <Leader>1 1gt
nnoremap <Leader>2 2gt
nnoremap <Leader>3 3gt
nnoremap <Leader>4 4gt
nnoremap <Leader>5 5gt
nnoremap <Leader>6 6gt
nnoremap <Leader>7 7gt
nnoremap <Leader>8 8gt
nnoremap <Leader>9 9gt

nnoremap tn :tabnew<cr>
nnoremap tk :tabnext<cr>
nnoremap tj :tabprev<cr>
nnoremap th :tabfirst<cr>
nnoremap tl :tablast<cr>
" nnoremap tc :tabclose<cr> "closing unsaved without warning

" :nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel "interresting for surounding


function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

nnoremap <c-n> :call NumberToggle()<cr>
"Abbreviation to correct typo
iabbrev adn and
iabbrev @@    Laurent Krishnathas
iabbrev ccopy Copyright 2018 Laurent Krishnathas, all rights reserved.

syntax on

set hidden
set backspace=indent,eol,start
"set clipboard=unnamed
"set number
"set relativenumber
set number            " Show line numbers
set ruler             " Show line and column number
set mouse=a

" removing dash in vertical separatory
set fillchars+=vert:\



syntax enable         " Turn on syntax highlighting allowing local overrides



set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
" set list                          " Show invisible characters



set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter

set tags=.ctags

iab task.  <ESC>otask _RRR_(dependsOn: [ ]){task-><CR><CR>}<ESC>?_RRR_<CR>ciw
iab doLast. <ESC>odoLast{<CR>_RRR_<CR>}<ESC>v?do<CR>>><ESC>/_RRR_<CR>ciw



"set t_Co=256
"let g:airline_powerline_fonts = 6

"let g:airline_theme='solarized light'




" if has("statusline") && !&cp
"   set laststatus=2  " always show the status bar
"
"   " Start the status line
"   set statusline=%f\ %m\ %r
"   set statusline+=Line:%l/%L[%p%%]
"   set statusline+=Col:%v
"   set statusline+=Buf:#%n
"   set statusline+=[%b][0x%B]
" endif


call plug#begin('~/.vim/plugged')

" automatically installing vim-plug if missing
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" //TODO Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'



Plug 'scrooloose/syntastic'

Plug 'kien/ctrlp.vim'

Plug 'airblade/vim-gitgutter'



" Git support insdie vim
Plug 'tpope/vim-fugitive'


" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
" Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
" Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading

" Navigation
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-master branch
" Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" no idea why need this again after the previous version
Plug 'junegunn/fzf.vim'

Plug 'rking/ag.vim'

Plug 'easymotion/vim-easymotion'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'wellle/tmux-complete.vim' "didn't work






"Plug 'craigemery/vim-autotag'

call plug#end()

" # Syntatic plugin settings, commented as it complain for java class "
" # set statusline+=%#warningmsg#"
" # set statusline+=%{SyntasticStatuslineFlag()}"
" # set statusline+=%*"
" #
" # let g:syntastic_always_populate_loc_list = 1"
" # let g:syntastic_auto_loc_list = 1"
" # let g:syntastic_check_on_open = 1"
" # let g:syntastic_check_on_wq = 0"

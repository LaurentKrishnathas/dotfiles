plugins {
    id 'groovy'
}

repositories {
    jcenter()
}

dependencies {
    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:2.4.15'

    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:1.0-groovy-2.4'

    compile 'org.slf4j:slf4j-api:1.7.14'

    testCompile 'junit:junit:4.12'
}


project.ext{
    projectDir="${System.getenv().HOME}/code/src" as File
    rep01Dir="$projectDir/rep01" as File
    githubDir="$projectDir/github.com" as File
    gitlabDir="$projectDir/gitlab" as File
    codecommitDir="$projectDir/codecommit" as File
}

task updateSvnGitRepos(type: devops.UpdateSvnGitRepoTask){
    addDir(rep01Dir)
    addDir(githubDir)
    addDir(gitlabDir)
    addDir(codecommitDir)
}

task checkGitSSHKeys(type: devops.CheckGitSSHKeyTask){task->
    destinationDir="$buildDir/$task.name" as File

    addUrl('git@github.com:LaurentKrishnathas/utils.git')
    addUrl('git@gitlab.com:Krishnathas/dockerfiles.git')
}

task cleanAllGradleProj(type: devops.CleanAllGradleProjTask){
    addDir(rep01Dir)
    addDir(githubDir)
    addDir(gitlabDir)
    addDir(codecommitDir)
}

task "install-tmuxinator"{task->
    task.logging.level=LogLevel.LIFECYCLE
    task.description="install tmuxinator files to user home"

    doLast{
        def sourceDir=System.properties.sourceDir as File
        assert sourceDir:" sourceDir is missing"
        assert sourceDir.exists():" $sourceDir must exists"

        File dir=new File(sourceDir, '.tmuxinator')
        logger.lifecycle "searching all yml files in $dir ..."

        def list=dir.listFiles().findAll{it.name.endsWith(".yml")}
        list.each{file->
            logger.debug "installing $file ..."
            File destFile="${System.getProperty("user.home")}/.tmuxinator/$file.name" as File

            if(destFile.exists()){
                logger.info "deleting $destFile ..."
                destFile.delete()
            }
            ant.delete(file: destFile)
            exec{
                commandLine "ln", "-s", file, destFile
                logger.info "/> ${commandLine.join(' ')}"
            }
            logger.lifecycle "$file.name installed."
        }
    }
}

task cleanAll(dependsOn: 'cleanAllGradleProj')

task testing{
    doLast{
        println "testing OK"
    }
}

check.dependsOn checkGitSSHKeys
//build.dependsOn updateSvnGitRepos


private setLoggingLevel(def task){
    def levelStr=System.properties.loggingLevel
    logger.debug "given loggingLevel is $levelStr"
    if(!levelStr){
        levelStr="LIFECYCLE"
    }
    levelStr=levelStr.toUpperCase()
    def level

    switch(levelStr){
        case "ERROR":
            level = LogLevel.ERROR
            break
        case "WARN":
            level = LogLevel.WARN
            break
        case "INFO":
            level = LogLevel.INFO
            break
        case "LIFECYCLE":
            level = LogLevel.LIFECYCLE
            break
        case "DEBUG":
            level = LogLevel.DEBUG
            break
        default:
            level = LogLevel.LIFECYCLE
    }

    logger.debug "logging level set to $levelStr, $level"
    task.logging.level = level
}